from connect import Connect, MyHTTPSHandler
from config import Config
import urllib2
import re
from lxml import etree
import json
from datetime import datetime
from settings import *

class Holding:
    def __init__(self, useTestData = True):
        print 'collection', 'holding'
        self.service = 'collection' # WMS Collection management API
        self.resource = 'holding'   # API resource
        self.config = Config(service = self.service, useTestData = useTestData)
        self.institution = self.config.getInstitutionData()
        self.serviceAPI = self.config.getServiceAPIData()
        self.institutionList = self.institution.get('institution')
        #self.branchList = self.institution.get('branch')
        
        self.resourceList = self.serviceAPI.get('%s.%s' % (self.service, self.resource))
        
    def open(self, **kwargs):
        '''
        Dispatch to the requested method
        arguments
        method: describes the method to perform (e.g. read)
        institution: name of the institute (e.g. nltud)
        oclcNumber: identifies the holding article
        apiParam: params givin in the original URL (e.g. itemsPerPage)
        '''
        try:
            method = kwargs['method']
            institution = kwargs['institution']
            oclcNumber = kwargs['oclcNumber']
            apiParam = kwargs['apiParam']
            _method = getattr(self, method)
            return _method(institution = institution, oclcNumber = oclcNumber, apiParam = apiParam)
        except Exception, inst:
            print 'rrr', inst
            raise Exception('Method %s not implemented, use an implemented method or implement this method in %s' % (method, self.__class__.__name__))
        
    def search(self, institution = None, oclcNumber = None, apiParam = ''):
        request_url = ''
        datacenter_id = ''
        institution_id = institution
        #oclcNumber = oclcNumber        

        try:
            for key, value in self.resourceList:
                if key == 'search':
                    request_url = value
                    break
                
            for key, value in self.institutionList:
                if key == 'datacenter':
                    datacenter_id = value
                if key == institution:
                    institution_id = value
    
        except Exception, inst:
            print inst
            

        request_url = request_url.replace('{datacenter}', datacenter_id)
        request_url = request_url.replace('{oclcNumber}', oclcNumber)
        if len(apiParam) > 0:
            if request_url.find('?') > -1:
                request_url = '%s&%s' % (request_url, apiParam)
            else:
                request_url = '%s?%s' % (request_url, apiParam)
            
        print 'request_url', request_url
        response = self._getResponse(institution_id = institution_id, request_url = request_url)
        #response = self.filterXML(response)
        try:
            filter = FilterHolding(data = response, config = self.config, oclcNumber = oclcNumber)
            response = filter.getFilteredData()
        except Exception, inst:
            response = inst 
        return response
        #return self._getResponse(institution_id = institution_id)
        
        
    def _getResponse(self, institution_id = None, request_url = ''):
        connect = Connect(institution_id = institution_id, request_url = request_url, config = self.config)
        opener = urllib2.build_opener(MyHTTPSHandler)
        opener.addheaders = [('accept', 'application/json'),('Authorization', connect.getAuthorization_header())]
        #opener.addheaders = [('accept', 'application/xml'),('Authorization', connect.getAuthorization_header())]
        response = opener.open(request_url).read()
        return response


class FilterHolding:
    def __init__(self, data = None, config = None, oclcNumber = None):
        self.data = self.getJSON(data)
        self.config = config
        '''
        self.items = ('articleTitle'
                      'articleAuthor',
                      'year',
                      'volume',
                      'issue',
                      'firstPage',
                     )
        '''
        self.items = ('callNumber',
                     )
        self.filteredData = {}
        self.getResult(data = self.data)

    def getResult(self, data = None):
        result = [] 
        #print 'data' ,json.dumps(data)
        #for key in data.keys():
        #    print 'key', key
        #    # voor als je nog iets wil doen met de algemene gegevens
        if data.has_key('entry'):
            for record in data.get('entry'):
                slip = {}
                # is initialisation optional?
                for item in self.items:
                    slip[item] = 'x'
            
                for item in self.items:
                    slip[item] = self._do(method = item, record = record)
                    # print 'slip;', slip
                

                result.append(slip)

        self.filteredData['data'] = result
        print 'result len', len(result)
        if len(result) == 0:
            self.filteredData['message'] = 'No data found'
        else:
            if len(result) > 1:
                s = 's'
            else:
                s = ''
            self.filteredData['message'] = '%s %s %s%s' % ('Found', len(result), 'item', s)

        return True

    def getFilteredData(self):
        return self.filteredData

    def getJSON(self, data):
        try:
            data = json.loads(data)
            return data
        except Exception, inst:
            print inst
        
    def _do(self, method = None, record = None):
        '''
        Dispatch to the requested method
        '''
        try:
            methodName = '%s%s%s' % ('_get', method[0].capitalize(), method[1:])
            method = getattr(self, methodName)
        except Exception, inst:
            print 'inst',inst
            raise Exception('Method %s not implemented, use an implemented method or implement this method in %s' % (method, self.__class__.__name__))
        return method(record)

    def _getCallNumber(self, record):
        try:
            result = record.get('shelvingDesignation').get('information')
            return result
        except:
            return 'Unknown'
    '''
    def _getArticleTitle(self, record):
        try:
            articleTitle = record.get('???')
            return articleTitle
        except:
            return 'Unknown'

    def _getArticleAuthor(self, record):
        try:
            articleAuthor = record.get('???')
            return articleAuthor
        except:
            return 'Unknown'

    def _getYear(self, record):
        try:
            year = record.get('???')
            return year
        except:
            return 'Unknown'

    def _getVolume(self, record):
        try:
            volume = record.get('???')
            return  volume
        except:
            return 'Unknown'

    def _getIssue(self, record):
        try:
            issue = record.get('???')
            return issue
        except:
            return 'Unknown'

    def _getfirstPage(self, record):
        try:
            firstPage = record.get('???')
            return firstPage 
        except:
            return 'Unknown'
    '''

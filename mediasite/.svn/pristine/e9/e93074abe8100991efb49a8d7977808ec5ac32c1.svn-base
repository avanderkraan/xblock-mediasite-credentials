#!/usr/bin/env python
# -*- coding: utf-8 -*-

# ###############################################################################
# Copyright 2014 OCLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###############################################################################

# Sample HMAC Hashing for Bibliographic record retrieval

from authliboclc import wskey, user
import httplib, urllib2
from config import Config


""" Helper class used to display the result headers """
class MyHTTPSConnection(httplib.HTTPSConnection):
    def send(self, s):
        #print s
        httplib.HTTPSConnection.send(self, s)

""" Helper class used to display the result headers """
class MyHTTPSHandler(urllib2.HTTPSHandler):
    def https_open(self, req):
        request = self.do_open(MyHTTPSConnection, req)
        #print request.info()
        return request

        
class Connect():
    def __init__(self, institution_id = None, request_url = None, config = None):
        self.config = config 
        self.authenticating_institution_id = institution_id
        self.request_url = request_url
        self.principal_id = ''
        self.principal_idns = ''
        try:
            self.key = self.config.getServiceData().get('key')
            self.secret = self.config.getServiceData().get('secret')
            if self.config.getServiceData().has_key('principal_id'):
                self.principal_id = self.config.getServiceData().get('principal_id')
                self.principal_idns = self.config.getServiceData().get('principal_idns')
            
        except Exception, inst:
            print inst

    def getWSKey(self):
        return wskey.Wskey(
            key=self.key,
            secret=self.secret,
            options=None)


    def getUser(self):
        return user.User(
            authenticating_institution_id=self.authenticating_institution_id,
            principal_id=self.principal_id,
            principal_idns=self.principal_idns
        )

    def getAuthorization_header(self):
        try:
            options = {}
            if self.principal_id:
                options={
                    'user': self.getUser(),
                    'auth_params': None}
            return self.getWSKey().get_hmac_signature(
            method='GET',
            request_url=self.request_url,
            options = options)
        except Exception, inst:
            print inst, self.request_url


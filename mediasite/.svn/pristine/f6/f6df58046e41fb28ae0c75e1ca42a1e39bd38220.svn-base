from connect import Connect, MyHTTPSHandler
from config import Config
import urllib2
#import re
#from lxml import etree
import json
#from datetime import datetime

class Bibliographicresource:
    '''
    Bibliographic resource information
    '''
    def __init__(self, useTestData = True):
        self.service = 'discovery'   # WMS Discovery API
        self.resource = 'bibliographicresource'   # API resource
        self.config = Config(service = self.service, useTestData = useTestData)
        self.serviceAPI = self.config.getServiceAPIData()
 
        self.resourceList = self.serviceAPI.get('%s.%s' % (self.service, self.resource))
        
    def open(self, **kwargs):
        '''
        Dispatch to the requested method
        arguments
        method: describes the method to perform (e.g. read)
        institution: name of the institute (e.g. nltud)
        apiParam: params givin in the original URL (e.g. itemsPerPage)
        '''
        try:
            method = kwargs['method']
            institution = kwargs['institution']
            apiParam = kwargs['apiParam']
            _method = getattr(self, method)
            return _method(institution = institution, apiParam = apiParam)
        except Exception, inst:
            raise Exception('Method %s not implemented, use an implemented method or implement this method in %s' % (method, self.__class__.__name__))

       
    def read(self, institution = None, oclcNumber = None, apiParam = ''):
        '''
        The dispatched method (see 'open')
        '''
        request_url = ''
        institution_id = institution
 
        try:
            for key, value in self.resourceList:
                if key == 'read':
                    request_url = value
                    break
        except Exception, inst:
            print inst
            
        request_url = request_url.replace('{oclcNumber}', oclcNumber)
        if len(apiParam) > 0:
            if request_url.find('?') > -1:
                request_url = '%s&%s' % (request_url, apiParam)
            else:
                request_url = '%s?%s' % (request_url, apiParam)
            

        #print 'request_url', request_url
        response = self._getResponse(institution_id = institution_id, request_url = request_url)
        try:
            filter = FilterPulllist(data = response, config = self.config, branchId = branch_id)
            response = filter.getFilteredData()
        except Exception, inst:
            response = inst 
        return response
        
        
    def _getResponse(self, institution_id = None, request_url = ''):
        connect = Connect(institution_id = institution_id, request_url = request_url, config = self.config)
        opener = urllib2.build_opener(MyHTTPSHandler)
        opener.addheaders = [('accept', 'application/json'),('Authorization', connect.getAuthorization_header())]
        response = opener.open(request_url).read()
        return response


class FilterPulllist:
    '''
    Filters the items needed from the API response
    '''
    def __init__(self, data = None, config = None, branchId = None):
        self.data = self.getJSON(data)
        self.config = config
        self.branchId = branchId
        self.items = ('callNumber',) 

        self.filteredData = {}
        self.getResult(data = self.data)

    def getResult(self, data = None):
        '''
        Creates a dictionary with a key 'data' that contains the filtered result and a key 'message' that contains a ... (yes!)
        '''
        result = [] 
        if data.has_key('entry'):
            for record in data.get('entry'):
                slip = {}
                for item in self.items:
                    slip[item] = 'x'
            
                for item in self.items:
                    slip[item] = self._do(method = item, record = record)

                result.append(slip)
        self.filteredData = {'data': result}
        return True

    def getFilteredData(self):
        '''
        returns the filtered data as a dictionary
        {'data': <data>, 'message': <message>}
        '''
        return self.filteredData

    def getJSON(self, data):
        try:
            data = json.loads(data)
            return data
        except Exception, inst:
            print inst
        
    def _do(self, method = None, record = None):
        '''
        Dispatch to the requested method
        '''
        try:
            methodName = '%s%s%s' % ('_get', method[0].capitalize(), method[1:])
            method = getattr(self, methodName)
        except Exception, inst:
            print 'inst',inst
            raise Exception('Method %s not implemented, use an implemented method or implement this method in %s' % (method, self.__class__.__name__))
        return method(record)

    def _getCallNumber(self, record):
        try:
            callNumber = record.get('????????????').get('????????')
            return callNumber
        except:
            return 'Unknown'
